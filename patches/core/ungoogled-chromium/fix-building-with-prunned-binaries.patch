# Contains tests and features that are unneeded and would otherwise
# require binaries to be whitelisted in the pruning list

--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -938,8 +938,6 @@ if (is_win) {
 
   bundle_data("chrome_framework_resources") {
     sources = [
-      "//ui/gl/resources/angle-metal/gpu_shader_cache.bin",
-
       # This image is used to badge the lock icon in the
       # authentication dialogs, such as those used for installation
       # from disk image and Keystone promotion (if so enabled).  It
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -845,10 +845,6 @@ static_library("browser") {
     "navigation_predictor/navigation_predictor_metrics_document_data.h",
     "navigation_predictor/navigation_predictor_preconnect_client.cc",
     "navigation_predictor/navigation_predictor_preconnect_client.h",
-    "navigation_predictor/preloading_model_keyed_service.cc",
-    "navigation_predictor/preloading_model_keyed_service.h",
-    "navigation_predictor/preloading_model_keyed_service_factory.cc",
-    "navigation_predictor/preloading_model_keyed_service_factory.h",
     "navigation_predictor/search_engine_preconnector.cc",
     "navigation_predictor/search_engine_preconnector.h",
     "net/chrome_mojo_proxy_resolver_factory.cc",
--- a/chrome/browser/navigation_predictor/navigation_predictor.cc
+++ b/chrome/browser/navigation_predictor/navigation_predictor.cc
@@ -17,8 +17,6 @@
 #include "base/time/default_tick_clock.h"
 #include "chrome/browser/navigation_predictor/navigation_predictor_keyed_service.h"
 #include "chrome/browser/navigation_predictor/navigation_predictor_keyed_service_factory.h"
-#include "chrome/browser/navigation_predictor/preloading_model_keyed_service.h"
-#include "chrome/browser/navigation_predictor/preloading_model_keyed_service_factory.h"
 #include "chrome/browser/preloading/prefetch/no_state_prefetch/no_state_prefetch_manager_factory.h"
 #include "chrome/browser/preloading/preloading_prefs.h"
 #include "chrome/browser/profiles/profile.h"
@@ -88,11 +86,6 @@ base::TimeDelta MLModelExecutionTimerSta
   return base::Milliseconds(timer_start_delay);
 }
 
-base::TimeDelta MLModelExecutionTimerInterval() {
-  static int timer_interval = base::GetFieldTrialParamByFeatureAsInt(
-      blink::features::kPreloadingHeuristicsMLModel, "timer_interval", 100);
-  return base::Milliseconds(timer_interval);
-}
 
 }  // namespace
 
@@ -309,69 +302,6 @@ void NavigationPredictor::ProcessPointer
 }
 
 void NavigationPredictor::OnMLModelExecutionTimerFired() {
-  // Check whether preloading is enabled or not.
-  Profile* profile =
-      Profile::FromBrowserContext(render_frame_host().GetBrowserContext());
-  if (prefetch::IsSomePreloadingEnabled(*profile->GetPrefs()) !=
-      content::PreloadingEligibility::kEligible) {
-    return;
-  }
-
-  // Execute the model.
-  PreloadingModelKeyedService* model_service =
-      PreloadingModelKeyedServiceFactory::GetForProfile(profile);
-  if (!model_service) {
-    return;
-  }
-
-  if (!ml_model_candidate_.has_value()) {
-    return;
-  }
-  auto it = anchors_.find(ml_model_candidate_.value());
-  if (it == anchors_.end()) {
-    return;
-  }
-
-  AnchorElementData& anchor = it->second;
-
-  PreloadingModelKeyedService::Inputs inputs;
-  inputs.contains_image = anchor.contains_image;
-  inputs.font_size = anchor.font_size;
-  inputs.has_text_sibling = anchor.has_text_sibling;
-  inputs.is_bold = anchor.is_bold_font;
-  inputs.is_in_iframe = anchor.is_in_iframe;
-  inputs.is_url_incremented_by_one = anchor.is_url_incremented_by_one;
-  inputs.navigation_start_to_link_logged =
-      anchor.first_report_timestamp - navigation_start_;
-  auto path_info = GetUrlPathLengthDepthAndHash(anchor.target_url);
-  inputs.path_length = path_info.path_length;
-  inputs.path_depth = path_info.path_depth;
-  inputs.percent_clickable_area = anchor.ratio_area;
-  inputs.percent_vertical_distance =
-      static_cast<int>(anchor.ratio_distance_root_top * 100);
-
-  inputs.is_same_origin = anchor.is_same_host;
-  auto to_timedelta = [this](std::optional<base::TimeTicks> ts) {
-    return ts.has_value() ? NowTicks() - ts.value() : base::TimeDelta();
-  };
-  inputs.entered_viewport_to_left_viewport =
-      to_timedelta(anchor.entered_viewport_timestamp);
-  inputs.hover_dwell_time = to_timedelta(anchor.pointer_over_timestamp);
-  inputs.pointer_hovering_over_count = anchor.pointer_hovering_over_count;
-  if (model_score_callback_) {
-    std::move(model_score_callback_).Run(inputs);
-  }
-  model_service->Score(
-      &scoring_model_task_tracker_, inputs,
-      base::BindOnce(&NavigationPredictor::OnPreloadingHeuristicsModelDone,
-                     weak_ptr_factory_.GetWeakPtr(), anchor.target_url));
-
-  if (!ml_model_execution_timer_.IsRunning()) {
-    ml_model_execution_timer_.Start(
-        FROM_HERE, MLModelExecutionTimerInterval(),
-        base::BindOnce(&NavigationPredictor::OnMLModelExecutionTimerFired,
-                       base::Unretained(this)));
-  }
 }
 
 void NavigationPredictor::SetModelScoreCallbackForTesting(
--- a/chrome/browser/optimization_guide/model_validator_keyed_service.cc
+++ b/chrome/browser/optimization_guide/model_validator_keyed_service.cc
@@ -33,39 +33,6 @@ namespace optimization_guide {
 
 ModelValidatorKeyedService::ModelValidatorKeyedService(Profile* profile)
     : profile_(profile) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  DCHECK(ShouldStartModelValidator());
-  auto* opt_guide_service =
-      OptimizationGuideKeyedServiceFactory::GetForProfile(profile);
-  if (!opt_guide_service) {
-    return;
-  }
-#if BUILDFLAG(BUILD_WITH_TFLITE_LIB)
-  if (switches::ShouldValidateModel()) {
-    // Create the validator object which will get destroyed when the model
-    // load is complete.
-    new ModelValidatorHandler(
-        opt_guide_service,
-        base::ThreadPool::CreateSequencedTaskRunner(
-            {base::MayBlock(), base::TaskPriority::BEST_EFFORT}));
-  }
-#endif  // BUILD_WITH_TFLITE_LIB
-  if (switches::ShouldValidateModelExecution()) {
-    auto* identity_manager = IdentityManagerFactory::GetForProfile(profile_);
-    if (!identity_manager) {
-      return;
-    }
-    if (!identity_manager->HasPrimaryAccount(signin::ConsentLevel::kSignin)) {
-      identity_manager_observation_.Observe(identity_manager);
-      return;
-    }
-    base::SequencedTaskRunner::GetCurrentDefault()->PostDelayedTask(
-        FROM_HERE,
-        base::BindOnce(
-            &ModelValidatorKeyedService::StartModelExecutionValidation,
-            weak_ptr_factory_.GetWeakPtr()),
-        kModelExecutionValidationStartupDelay);
-  }
 }
 
 ModelValidatorKeyedService::~ModelValidatorKeyedService() = default;
@@ -92,24 +59,6 @@ void ModelValidatorKeyedService::OnPrima
 }
 
 void ModelValidatorKeyedService::StartModelExecutionValidation() {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  auto* opt_guide_service =
-      OptimizationGuideKeyedServiceFactory::GetForProfile(profile_);
-  if (!opt_guide_service) {
-    return;
-  }
-  base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
-  std::string model_execution_input =
-      command_line->GetSwitchValueASCII(switches::kModelExecutionValidate);
-  if (model_execution_input.empty()) {
-    return;
-  }
-  proto::StringValue request;
-  request.set_value(model_execution_input);
-  opt_guide_service->ExecuteModel(
-      proto::ModelExecutionFeature::MODEL_EXECUTION_FEATURE_TEST, request,
-      base::BindOnce(&ModelValidatorKeyedService::OnModelExecuteResponse,
-                     weak_ptr_factory_.GetWeakPtr()));
 }
 
 void ModelValidatorKeyedService::OnModelExecuteResponse(
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -92,7 +92,6 @@
 #include "chrome/browser/media_galleries/media_galleries_preferences_factory.h"
 #include "chrome/browser/metrics/variations/google_groups_updater_service_factory.h"
 #include "chrome/browser/navigation_predictor/navigation_predictor_keyed_service_factory.h"
-#include "chrome/browser/navigation_predictor/preloading_model_keyed_service_factory.h"
 #include "chrome/browser/net/dns_probe_service_factory.h"
 #include "chrome/browser/net/profile_network_context_service_factory.h"
 #include "chrome/browser/notifications/metrics/notification_metrics_logger_factory.h"
@@ -917,7 +916,6 @@ void ChromeBrowserMainExtraPartsProfiles
 #endif
   ModelTypeStoreServiceFactory::GetInstance();
   NavigationPredictorKeyedServiceFactory::GetInstance();
-  PreloadingModelKeyedServiceFactory::GetInstance();
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   NearbySharingServiceFactory::GetInstance();
   if (base::FeatureList::IsEnabled(ash::features::kNearbyPresence)) {
--- a/chrome/browser/profiles/profile_manager.cc
+++ b/chrome/browser/profiles/profile_manager.cc
@@ -48,7 +48,6 @@
 #include "chrome/browser/extensions/chrome_content_browser_client_extensions_part.h"
 #include "chrome/browser/lifetime/application_lifetime.h"
 #include "chrome/browser/navigation_predictor/navigation_predictor_keyed_service_factory.h"
-#include "chrome/browser/navigation_predictor/preloading_model_keyed_service_factory.h"
 #include "chrome/browser/permissions/adaptive_quiet_notification_permission_ui_enabler.h"
 #include "chrome/browser/prefs/incognito_mode_prefs.h"
 #include "chrome/browser/profiles/delete_profile_helper.h"
@@ -1566,9 +1565,6 @@ void ProfileManager::DoFinalInitForServi
   }
 #endif  // !BUILDFLAG(IS_ANDROID)
 
-  // Ensure PreloadingModelKeyedService is started.
-  PreloadingModelKeyedServiceFactory::GetForProfile(profile);
-
   IdentityManagerFactory::GetForProfile(profile)->OnNetworkInitialized();
   AccountReconcilorFactory::GetForProfile(profile);
 
--- a/chrome/browser/ui/webui/omnibox/omnibox_page_handler.cc
+++ b/chrome/browser/ui/webui/omnibox/omnibox_page_handler.cc
@@ -39,7 +39,6 @@
 #include "components/omnibox/browser/autocomplete_match.h"
 #include "components/omnibox/browser/autocomplete_provider.h"
 #include "components/omnibox/browser/autocomplete_result.h"
-#include "components/omnibox/browser/autocomplete_scoring_model_service.h"
 #include "components/omnibox/browser/omnibox_field_trial.h"
 #include "components/search_engines/template_url.h"
 #include "content/public/browser/web_ui.h"
@@ -500,31 +499,12 @@ void OmniboxPageHandler::StartOmniboxQue
 }
 
 void OmniboxPageHandler::GetMlModelVersion(GetMlModelVersionCallback callback) {
-  if (auto* service = GetMlService()) {
-    auto version = service->GetModelVersion();
-    if (version == -1) {
-      service->AddOnModelUpdatedCallback(
-          base::BindOnce(&OmniboxPageHandler::GetMlModelVersion,
-                         weak_factory_.GetWeakPtr(), std::move(callback)));
-    } else {
-      std::move(callback).Run(version);
-    }
-  } else {
     std::move(callback).Run(-1);
-  }
 }
 
 void OmniboxPageHandler::StartMl(mojom::SignalsPtr mojom_signals,
                                  StartMlCallback callback) {
-  if (auto* service = GetMlService()) {
-    AutocompleteMatch::ScoringSignals signals =
-        mojo::ConvertTo<AutocompleteMatch::ScoringSignals>(mojom_signals);
-    std::vector<AutocompleteScoringModelService::Result> result =
-        service->BatchScoreAutocompleteUrlMatchesSync({&signals});
-    std::move(callback).Run(result.size() ? result[0].value_or(-1) : -1);
-  } else {
     std::move(callback).Run(-1);
-  }
 }
 
 std::unique_ptr<AutocompleteController> OmniboxPageHandler::CreateController(
@@ -549,8 +529,5 @@ OmniboxPageHandler::GetAutocompleteContr
 }
 
 AutocompleteScoringModelService* OmniboxPageHandler::GetMlService() {
-  return OmniboxFieldTrial::IsMlUrlScoringEnabled()
-             ? AutocompleteScoringModelServiceFactory::GetInstance()
-                   ->GetForProfile(profile_)
-             : nullptr;
+  return nullptr;
 }
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -3114,13 +3114,6 @@ if (!is_android && !is_fuchsia) {
         "//pdf/loader",
       ]
 
-      if (is_linux) {
-        # Add a data dependency for pdf_extension_accessibility_test.cc to
-        # notify testing builders that this test needs this library, which will
-        # need to be downloaded from CIPD as defined in //DEPS.
-        data_deps += [ "//third_party/screen-ai:screen_ai_linux" ]
-      }
-
       if (enable_printing) {
         sources += [ "../browser/pdf/pdf_extension_printing_test.cc" ]
 
--- a/chrome/test/chromedriver/BUILD.gn
+++ b/chrome/test/chromedriver/BUILD.gn
@@ -397,7 +397,7 @@ source_set("lib") {
   }
 }
 
-if (is_linux) {
+if (false) {
   # Linux
   executable("chromedriver_server.unstripped") {
     testonly = true
--- a/chrome/test/variations/BUILD.gn
+++ b/chrome/test/variations/BUILD.gn
@@ -18,7 +18,6 @@ python_library("test_utils") {
 
   data = [ "//chrome/test/variations/test_utils/" ]
 
-  data_deps = [ "//third_party/catapult/third_party/gsutil:gsutil" ]
 }
 
 python_library("fixtures") {
--- a/components/omnibox/browser/autocomplete_classifier.cc
+++ b/components/omnibox/browser/autocomplete_classifier.cc
@@ -97,8 +97,6 @@ void AutocompleteClassifier::Classify(
     metrics::OmniboxEventProto::PageClassification page_classification,
     AutocompleteMatch* match,
     GURL* alternate_nav_url) {
-  TRACE_EVENT1("omnibox", "AutocompleteClassifier::Classify", "text",
-               base::UTF16ToUTF8(text));
   DCHECK(!inside_classify_);
   base::AutoReset<bool> reset(&inside_classify_, true);
   AutocompleteInput input(text, page_classification, *scheme_classifier_);
--- a/components/omnibox/browser/autocomplete_controller.cc
+++ b/components/omnibox/browser/autocomplete_controller.cc
@@ -43,7 +43,6 @@
 #include "components/omnibox/browser/autocomplete_input.h"
 #include "components/omnibox/browser/autocomplete_match_type.h"
 #include "components/omnibox/browser/autocomplete_provider.h"
-#include "components/omnibox/browser/autocomplete_scoring_model_service.h"
 #include "components/omnibox/browser/autocomplete_scoring_signals_annotator.h"
 #include "components/omnibox/browser/bookmark_provider.h"
 #include "components/omnibox/browser/bookmark_scoring_signals_annotator.h"
--- a/components/update_client/BUILD.gn
+++ b/components/update_client/BUILD.gn
@@ -312,8 +312,6 @@ source_set("unit_tests") {
     "//third_party/puffin:libpuffpatch",
     "//third_party/re2",
   ]
-
-  data_deps = [ "//components/test/data/update_client/puffin_patch_test:puffin_patch_test_files" ]
 }
 
 fuzzer_test("update_client_protocol_serializer_fuzzer") {
--- a/content/shell/BUILD.gn
+++ b/content/shell/BUILD.gn
@@ -739,10 +739,6 @@ if (is_apple) {
       deps = [ "//third_party/icu:icudata" ]
     }
 
-    if (is_mac) {
-      sources += [ "//ui/gl/resources/angle-metal/gpu_shader_cache.bin" ]
-    }
-
     if (v8_use_external_startup_data) {
       public_deps += [ "//v8" ]
       if (use_v8_context_snapshot) {
--- a/third_party/devtools-frontend/src/BUILD.gn
+++ b/third_party/devtools-frontend/src/BUILD.gn
@@ -13,7 +13,6 @@ import("./third_party/blink/public/publi
 
 devtools_frontend_resources_deps = [
   "front_end",
-  "test",
 ]
 
 group("devtools_all_files") {
--- a/third_party/puffin/BUILD.gn
+++ b/third_party/puffin/BUILD.gn
@@ -115,7 +115,6 @@ executable("puffin_unittest") {
     "src/unittest_common.cc",
     "src/utils_unittest.cc",
   ]
-  data_deps = [ "//components/test/data/update_client/puffin_patch_test:puffin_patch_test_files" ]
   deps = [
     ":libpuffdiff",
     ":libpuffpatch",
